#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Sphinx Search
set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SPHINX_PORT="9304"
LIMIT=10
VERBOSE=false
JSON_OUTPUT=false

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò] –ó–ê–ü–†–û–°

–ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ Sphinx Search

–û–ü–¶–ò–ò:
    -s, --search –ó–ê–ü–†–û–°    –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    -l, --limit –ß–ò–°–õ–û      –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $LIMIT)
    -j, --json             –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    -v, --verbose          –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    -h, --help             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    $0 -s "—Ç–µ—Å—Ç"
    $0 --search "–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç" --limit 5
    $0 -s "FTP –¥–æ—Å—Ç—É–ø" --json --verbose

EOF
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -s|--search)
                SEARCH_QUERY="$2"
                shift 2
                ;;
            -l|--limit)
                LIMIT="$2"
                shift 2
                ;;
            -j|--json)
                JSON_OUTPUT=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                if [ -z "$SEARCH_QUERY" ]; then
                    SEARCH_QUERY="$1"
                else
                    log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1"
                    show_help
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "$SEARCH_QUERY" ]; then
        log_error "–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        show_help
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Sphinx
check_sphinx() {
    if ! mysql -h 127.0.0.1 -P "$SPHINX_PORT" -e "SHOW TABLES;" >/dev/null 2>&1; then
        log_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Sphinx Search"
        log_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: docker ps --filter name=sphinx-search"
        log_info "–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/start_sphinx.sh"
        exit 1
    fi
}

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è SQL
escape_query() {
    local query="$1"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    echo "$query" | sed "s/'/''/g"
}

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
perform_search() {
    local escaped_query=$(escape_query "$SEARCH_QUERY")
    local start_time=$(date +%s.%N)
    
    if [ "$VERBOSE" = true ]; then
        log_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞: '$SEARCH_QUERY'"
        log_info "–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $LIMIT"
    fi
    
    # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    local sql="SELECT id, url, created_at, title_text, content_text, WEIGHT() as score FROM documents WHERE MATCH('$escaped_query') ORDER BY score DESC LIMIT $LIMIT;"
    
    if [ "$VERBOSE" = true ]; then
        log_info "SQL –∑–∞–ø—Ä–æ—Å: $sql"
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    local results=$(mysql -h 127.0.0.1 -P "$SPHINX_PORT" -e "$sql" 2>/dev/null)
    local exit_code=$?
    
    local end_time=$(date +%s.%N)
    local duration=$(echo "$end_time - $start_time" | bc -l)
    local duration_ms=$(echo "$duration * 1000" | bc -l | cut -d. -f1)
    
    if [ $exit_code -ne 0 ]; then
        log_error "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"
        return 1
    fi
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    local result_count=$(echo "$results" | tail -n +2 | wc -l)
    
    if [ "$JSON_OUTPUT" = true ]; then
        format_json_output "$results" "$result_count" "$duration_ms"
    else
        format_text_output "$results" "$result_count" "$duration_ms"
    fi
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –≤ JSON
format_json_output() {
    local results="$1"
    local count="$2"
    local duration="$3"
    
    local max_score=0
    if [ $count -gt 0 ]; then
        max_score=$(echo "$results" | tail -n +2 | head -1 | awk -F'\t' '{print $NF}' | bc -l 2>/dev/null || echo "0")
    fi
    
    echo "{"
    echo "  \"total\": $count,"
    echo "  \"took\": $duration,"
    echo "  \"max_score\": $max_score,"
    echo "  \"hits\": ["
    
    local first=true
    echo "$results" | tail -n +2 | while IFS=$'\t' read -r id url created_at title_text content_text score; do
        if [ "$first" = true ]; then
            first=false
        else
            echo ","
        fi
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        local clean_title=$(echo "$title_text" | sed 's/"/\\"/g')
        local clean_content=$(echo "$content_text" | sed 's/"/\\"/g')
        
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –∏–∑ URL
        if [ -z "$clean_title" ]; then
            clean_title=$(basename "$url" | sed 's/_/ /g' | sed 's/\..*$//')
        fi
        
        echo "    {"
        echo "      \"_id\": \"$id\","
        echo "      \"_score\": $(echo "scale=3; $score / 1000" | bc -l),"
        echo "      \"_source\": {"
        echo "        \"title\": \"$clean_title\","
        echo "        \"url\": \"$url\","
        echo "        \"content\": \"$clean_content\""
        echo "      }"
        echo -n "    }"
    done
    
    echo ""
    echo "  ]"
    echo "}"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
format_text_output() {
    local results="$1"
    local count="$2"
    local duration="$3"
    
    echo ""
    echo "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: \"$SEARCH_QUERY\""
    echo "üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: $count"
    echo "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms"
    echo ""
    
    if [ $count -eq 0 ]; then
        echo "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        echo ""
        echo "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
        echo "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
        echo "   - –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å"
        echo "   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ"
        return
    fi
    
    local counter=1
    echo "$results" | tail -n +2 | while IFS=$'\t' read -r id url created_at title_text content_text score; do
        local title="$title_text"
        if [ -z "$title" ]; then
            title=$(basename "$url" | sed 's/_/ /g' | sed 's/\..*$//')
        fi
        
        echo "[$counter] üìÑ $title (ID: $id, Score: $score)"
        echo "    üîó $url"
        echo "    üìÖ $(date -d @$created_at '+%Y-%m-%d %H:%M:%S')"
        if [ -n "$content_text" ]; then
            echo "    üìù $content_text"
        fi
        echo ""
        counter=$((counter + 1))
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    parse_args "$@"
    
    if [ "$VERBOSE" = true ]; then
        log_info "Sphinx Search - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"
    fi
    
    check_sphinx
    perform_search
}

# –ó–∞–ø—É—Å–∫
main "$@"